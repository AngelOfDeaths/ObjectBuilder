<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2014-2017 Object Builder <https://github.com/ottools/ObjectBuilder>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:nail="library://ns.nail.com/naillib"
          xmlns:otlib="otlib.components.*"
          minWidth="500"
          minHeight="400"
          fontSize="11"
          showStatusBar="false"
          backgroundColor="0x494949"
          title="@Resource(key='objectViewer', bundle='strings')"
          creationComplete="creationCompleteHandler(event)"
          closing="closingHandler(event)">

    <fx:Script>
        <![CDATA[
            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;

            import flashx.textLayout.conversion.TextConverter;

            import nail.commands.ICommunicator;
            import nail.components.controls.Alert;
            import nail.errors.NullArgumentError;
            import nail.utils.FileUtil;
            import nail.utils.StringUtil;
            import nail.utils.WindowUtil;
            import nail.utils.isNullOrEmpty;

            import ob.commands.SetClientInfoCommand;
            import ob.commands.things.ImportThingsFromFilesCommand;
            import ob.core.IObjectBuilder;

            import otlib.assets.Assets;
            import otlib.loaders.PathHelper;
            import otlib.settings.ISettingsManager;
            import otlib.settings.SettingsManager;
            import otlib.things.ThingCategory;
            import otlib.things.ThingData;
            import otlib.utils.ClientInfo;
            import otlib.utils.OTFormat;

            import ov.settings.ObjectViewerSettings;

            //--------------------------------------------------------------------------
            // PROPERTIES
            //--------------------------------------------------------------------------

            private var m_application:IObjectBuilder;
            private var m_communicator:ICommunicator;
            private var m_settingsManager:ISettingsManager;
            private var m_settings:ObjectViewerSettings;
            private var m_file:File;
            private var m_fileChanged:Boolean;
            private var m_fileList:Vector.<File>;
            private var m_index:int;
            private var m_lastDirectory:File;
            private var m_zoom:Number;
            private var m_zoomChanged:Boolean;

            private const STATUS:String = "<b>{0}</b>: {1} - <b>{2}</b>: {3} - <b>{4}</b>: {5} - <b>{6}</b>: {7}";

            //--------------------------------------
            // Getters / Setters
            //--------------------------------------

            public function get communicator():ICommunicator { return m_communicator; }
            public function set communicator(value:ICommunicator):void
            {
                if (m_communicator) {
                    m_communicator.unregisterCallback(SetClientInfoCommand, clientInfoCallback);
                    m_communicator = null;
                }

                m_communicator = value;

                if (m_communicator) {
                    m_communicator.registerCallback(SetClientInfoCommand, clientInfoCallback);
                }
            }

            public function get file():File { return m_file; }
            public function set file(value:File):void
            {
                m_file = value;
                m_fileChanged = true;
                invalidateProperties();
            }

            [Bindable]
            public function get zoom():Number { return m_zoom; }
            public function set zoom(value:Number):void
            {
                if (m_zoom != value && value >= zoomSlider.minimum && value <= zoomSlider.maximum) {
                    m_zoom = value;
                    m_zoomChanged = true;
                    invalidateProperties();
                }
            }

            public function get hasFiles():Boolean { return !isNullOrEmpty(m_fileList); }

            //--------------------------------------------------------------------------
            // METHODS
            //--------------------------------------------------------------------------

            //--------------------------------------
            // Override Protected
            //--------------------------------------

            override protected function commitProperties():void
            {
                super.commitProperties();

                if (m_fileChanged) {
                    setFile(m_file);
                    m_fileChanged = false;
                }

                if (m_zoomChanged) {
                    thingView.scaleX = m_zoom;
                    thingView.scaleY = m_zoom;
                    m_zoomChanged = false;
                }
            }

            //--------------------------------------
            // Private
            //--------------------------------------

            private function loadSettings():void
            {
                m_settings = new ObjectViewerSettings();
                m_settingsManager.loadSettings(m_settings);

                if (m_settings.maximized)
                    this.maximize();
                else
                    WindowUtil.centralizeWindowOnScreen(this);
            }

            private function saveSettings():void
            {
                m_settings.maximized = (nativeWindow.displayState == NativeWindowDisplayState.MAXIMIZED);
                m_settingsManager.saveSettings(m_settings);
            }

            private function clientInfoCallback(info:ClientInfo):void
            {
                if (!info)
                    throw new NullArgumentError("info");

                importButton.enabled = (info.loaded && hasFiles);
            }

            private function setFile(fileTarget:File):void
            {
                if (!fileTarget || fileTarget.extension != OTFormat.OBD) {
                    thingView.thingData = null;
                    descriptionText.text = "";
                    previousButton.enabled = false;
                    nextButton.enabled = false;
                    importButton.enabled = false;
                    deleteButton.enabled = false;
                    return;
                }

                var directory:File = FileUtil.getDirectory(fileTarget);

                // Checks if the new directory and the current directory are equal.
                if (m_fileList && m_lastDirectory && FileUtil.equals(m_lastDirectory, directory)) {
                    setFileList(fileTarget, m_fileList);
                    return;
                }

                var files:Array = directory.getDirectoryListing();
                var length:uint = files.length;
                var fileFoundList:Vector.<File> = new Vector.<File>();

                for (var i:uint = 0; i < length; i++) {
                    var file:File = files[i];
                    if (file.extension == OTFormat.OBD)
                        fileFoundList[fileFoundList.length] = file;
                }

                m_lastDirectory = directory;
                FileUtil.sortFiles(fileFoundList, Array.NUMERIC);
                setFileList(fileTarget, fileFoundList);
            }

            private function onOpenFile():void
            {
                var filter:FileFilter = new FileFilter("Object Builder Data", "*.obd;");
                var file:File = m_lastDirectory ? new File(m_lastDirectory.nativePath) : m_settings.getLastDirectory();
                file.addEventListener(Event.SELECT, fileSelectHandler);
                file.browseForOpen(resourceManager.getString("strings", "selectFile"), [filter]);

                function fileSelectHandler(event:Event):void
                {
                    m_settings.setLastDirectory(file);
                    setFile(file);
                }
            }

            private function setFileList(target:File, list:Vector.<File>):void
            {
                m_fileList = list;

                previousButton.enabled = this.hasFiles;
                nextButton.enabled = this.hasFiles;
                importButton.enabled = (m_application && m_application.clientLoaded && this.hasFiles);
                deleteButton.enabled = this.hasFiles;

                loadThingData(target);

                var length:uint = list.length;
                for (var i:uint = 0; i < length; i++) {
                    if (target.nativePath == list[i].nativePath) {
                        m_index = i;
                        break;
                    }
                }
            }

            private function loadThingData(file:File):void
            {
                try
                {
                    var thingData:ThingData = ThingData.createFromFile(file);

                    var statusText:String = StringUtil.format(
                        STATUS,
                        resourceManager.getString("strings", "name"),
                        FileUtil.getName(file),
                        resourceManager.getString("strings", "type"),
                        resourceManager.getString("strings", thingData.category),
                        resourceManager.getString("strings", "client"),
                        (thingData.clientVersion / 100).toString(),
                        "OBD",
                        (thingData.obdVersion / 100).toString());

                    this.descriptionText.textFlow = TextConverter.importToFlow(
                        statusText,
                        TextConverter.TEXT_FIELD_HTML_FORMAT);

                    this.thingView.thingData = thingData;

                    if (thingData.category == ThingCategory.OUTFIT) {
                        thingView.patternX = 2;
                        thingView.drawBlendLayer = false;
                    } else {
                        thingView.patternX = 0;
                        thingView.drawBlendLayer = true;
                    }

                    thingView.play();

                } catch(error:Error) {
                    Alert.show(error.getStackTrace(), resourceManager.getString("strings", "error"), Alert.OK, this);
                }
            }

            private function previousObject():void
            {
                m_index = (m_index - 1 < 0) ? (m_fileList.length - 1) : (m_index - 1);
                loadThingData(m_fileList[m_index]);
            }

            private function nextObject():void
            {
                if (m_fileList.length != 0) {
                    m_index = (m_index + 1) % m_fileList.length;
                    loadThingData(m_fileList[m_index]);
                } else
                    this.file = null;
            }

            //--------------------------------------
            // Event Handlers
            //--------------------------------------

            protected function creationCompleteHandler(event:FlexEvent):void
            {
                m_application = IObjectBuilder(FlexGlobals.topLevelApplication);
                m_settingsManager = SettingsManager.getInstance();
                systemManager.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
                importButton.enabled = (m_application.clientLoaded && this.hasFiles);
                loadSettings();
            }

            protected function closingHandler(event:Event):void
            {
                this.communicator = null;
                systemManager.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
                saveSettings();
            }

            protected function previousButtonDownHandler(event:FlexEvent):void
            {
                this.previousObject();
            }

            protected function nextButtonDownHandler(event:FlexEvent):void
            {
                this.nextObject();
            }

            protected function importButtonClickHandler(event:MouseEvent):void
            {
                if (!m_application.clientLoaded) return;

                var list:Vector.<PathHelper> = new Vector.<PathHelper>(1, true);
                list[0] = new PathHelper(m_fileList[m_index].nativePath);
                m_communicator.sendCommand(new ImportThingsFromFilesCommand(list));
            }

            protected function deleteButtonClickHandler(event:MouseEvent):void
            {
                if (!thingView.thingData) return;

                var file:File = m_fileList[m_index];

                try
                {
                    file.moveToTrash();
                    m_fileList.splice(m_index, 1);
                    nextObject();
                } catch(error:Error) { }
            }

            override protected function keyDownHandler(event:KeyboardEvent):void
            {
                var keyCode:uint = event.keyCode;

                if (event.ctrlKey) {
                    switch(keyCode) {
                        case Keyboard.O:
                            this.onOpenFile();
                            break;
                    }
                } else if (m_fileList && m_fileList.length > 1) {
                    switch(keyCode) {
                        case Keyboard.LEFT:
                            this.previousObject();
                            break;
                        case Keyboard.RIGHT:
                            this.nextObject();
                            break;
                    }
                }
            }

            protected function zoomChangeHandler(event:Event):void
            {
                this.zoom = HSlider(event.target).value;
            }

        ]]>
    </fx:Script>

    <s:layout>
        <s:VerticalLayout/>
    </s:layout>

    <!-- tool bar -->
    <s:Group width="100%"
             height="35"
             top="0">

        <!-- highlight -->
        <s:Rect left="-1" right="-1" top="1" bottom="0">
            <s:stroke>
                <s:SolidColorStroke color="0x636363"/>
            </s:stroke>
        </s:Rect>

        <!-- border -->
        <s:Rect left="-1" right="-1" top="0" bottom="0">
            <s:stroke>
                <s:SolidColorStroke color="0x272727"/>
            </s:stroke>
        </s:Rect>

        <s:HGroup width="100%"
                  height="100%"
                  verticalAlign="middle"
                  paddingLeft="10"
                  paddingRight="10">

            <s:Button id="openButton"
                      toolTip="@Resource(key='menu.open', bundle='strings')"
                      width="25"
                      height="25"
                      icon="{Assets.OPEN}"
                      skinClass="nail.components.skins.IconButtonSkin"
                      click="onOpenFile()"/>

        </s:HGroup>
    </s:Group>

    <s:HGroup width="100%"
              height="100%"
              horizontalAlign="center"
              verticalAlign="middle">

        <otlib:ThingDataView id="thingView"/>
    </s:HGroup>

    <s:HGroup width="100%"
              horizontalAlign="center"
              verticalAlign="middle">

        <s:Button id="previousButton"
                  toolTip="@Resource(key='previous', bundle='strings')"
                  width="25"
                  height="25"
                  icon="{Assets.FIRST}"
                  enabled="false"
                  autoRepeat="true"
                  repeatInterval="200"
                  buttonDown="previousButtonDownHandler(event)"/>

        <s:Button id="importButton"
                  toolTip="@Resource(key='import', bundle='strings')"
                  width="25"
                  height="25"
                  icon="{Assets.IMPORT}"
                  enabled="false"
                  click="importButtonClickHandler(event)"/>

        <s:Button id="deleteButton"
                  toolTip="@Resource(key='delete', bundle='strings')"
                  width="25"
                  height="25"
                  icon="{Assets.DELETE}"
                  enabled="false"
                  click="deleteButtonClickHandler(event)"/>

        <s:Button id="nextButton"
                  toolTip="@Resource(key='next', bundle='strings')"
                  width="25"
                  height="25"
                  icon="{Assets.LAST}"
                  enabled="false"
                  autoRepeat="true"
                  repeatInterval="200"
                  buttonDown="nextButtonDownHandler(event)"/>
    </s:HGroup>

    <nail:StatusBar width="100%"
                    height="24">

        <nail:layout>
            <s:HorizontalLayout verticalAlign="middle"
                                paddingLeft="10"
                                paddingRight="10"/>
        </nail:layout>

        <s:Spacer width="100%"/>

        <s:RichEditableText id="descriptionText"
                            editable="false"
                            focusEnabled="false"/>

        <s:Spacer width="100%"/>

        <s:Label text="{resourceManager.getString('strings', 'zoom')+':'}"/>

        <s:HSlider id="zoomSlider"
                   width="100"
                   minimum="1.0"
                   maximum="5.0"
                   stepSize="0.1"
                   value="{zoom}"
                   focusEnabled="false"
                   change="zoomChangeHandler(event)"/>
    </nail:StatusBar>
</s:Window>
